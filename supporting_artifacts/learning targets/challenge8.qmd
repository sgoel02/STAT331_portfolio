---
title: "Challenge 8: The 12 Days of Christmas"
author: "Sara Goel"
execute:
  error: true
  echo: true
  include: true
editor: visual
---

```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)
```

```{r load-file}
#| warning: false
#| message: false
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

**Question 1**

**Create function to make gifts plural:**

```{r pluralize-function}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

gift <- 
  case_when(
    str_detect(gift, "oo", negate = FALSE) ~ str_replace(gift, "oo", "ee"),
    str_detect(gift, "y$", negate = FALSE) ~ str_replace(gift, "y", "ies"),
    TRUE ~ str_c(gift, "s", sep = "")
  )

return(gift)

}
```

```{r pluralize-test}

## This will work if your function is vectorized!
pluralize_gift(xmas$Gift.Item)
```

**Question 2**

**Create function to make the phrase:**

```{r phrase-function}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- if_else(num_word != "one", pluralize_gift(item), item)
  
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  if(num_word == "one")
  {
    num_word <- ""
    if(str_starts(item, "^a^e^i^o^u")){
      item <- glue("an {item}")
    }
    else{
      item <- glue("a {item}")
    }
  }
  
  ## Step 4: Glue all of the pieces together! 
  final_str <- glue::glue("{num_word} {adjective} {item} {verb} {location}")
  return(str_squish(final_str))
  
}

```

```{r test}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(
      list(
           num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```

**Question 3**

**Create a function to glue all the lines together and sing the song:**

```{r write-function}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_line <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me:")
  
  # Step 2: Sing the gift phrases

  phrases <- dataset |>
      pull( {{phrase_col}} )
    
  final <- phrases[line:1]
  
  final <- glue_collapse(final, sep = ",\n", last = "\nand ")
  
  return(glue::glue("{intro}\n{final}\n\n"))

}
```

**Final Output of the song:**

```{r final-result}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase)
  )

map_chr(1:12, ~sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |> 
  cat()
```
